/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateOrUpdatePermissionPayload,
    CreateOrUpdatePermissionPayloadFromJSON,
    CreateOrUpdatePermissionPayloadToJSON,
    ErrorPayload,
    ErrorPayloadFromJSON,
    ErrorPayloadToJSON,
    PermissionCreated,
    PermissionCreatedFromJSON,
    PermissionCreatedToJSON,
} from '../models';

export interface CreateOrUpdatePermissionRequest {
    code: string;
    createOrUpdatePermissionPayload: CreateOrUpdatePermissionPayload;
}

/**
 * 
 */
export class PermissionApi extends runtime.BaseAPI {

    /**
     * Create or update a permission for a given code
     */
    async createOrUpdatePermissionRaw(requestParameters: CreateOrUpdatePermissionRequest): Promise<runtime.ApiResponse<PermissionCreated>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling createOrUpdatePermission.');
        }

        if (requestParameters.createOrUpdatePermissionPayload === null || requestParameters.createOrUpdatePermissionPayload === undefined) {
            throw new runtime.RequiredError('createOrUpdatePermissionPayload','Required parameter requestParameters.createOrUpdatePermissionPayload was null or undefined when calling createOrUpdatePermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/permissions/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdatePermissionPayloadToJSON(requestParameters.createOrUpdatePermissionPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionCreatedFromJSON(jsonValue));
    }

    /**
     * Create or update a permission for a given code
     */
    async createOrUpdatePermission(requestParameters: CreateOrUpdatePermissionRequest): Promise<PermissionCreated> {
        const response = await this.createOrUpdatePermissionRaw(requestParameters);
        return await response.value();
    }

}
