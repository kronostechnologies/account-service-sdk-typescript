/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorPayload,
    ErrorPayloadFromJSON,
    ErrorPayloadToJSON,
    Id,
    IdFromJSON,
    IdToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserAccountSearchResult,
    UserAccountSearchResultFromJSON,
    UserAccountSearchResultToJSON,
} from '../models';

export interface DeleteUserSessionsRequest {
    uuid: string;
}

export interface GetUserRequest {
    uuid: string;
}

export interface GetUuidByIdRequest {
    id: number;
}

export interface ListUsersRequest {
    identifierOrEmail?: string | null;
    identifier?: string | null;
    email?: string | null;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Delete all sessions for the user.
     */
    async deleteUserSessionsRaw(requestParameters: DeleteUserSessionsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteUserSessions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{uuid}/sessions`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all sessions for the user.
     */
    async deleteUserSessions(requestParameters: DeleteUserSessionsRequest): Promise<void> {
        await this.deleteUserSessionsRaw(requestParameters);
    }

    /**
     * Get detailed information about a user account.
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a user account.
     */
    async getUser(requestParameters: GetUserRequest): Promise<User> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find an uuid by id.
     */
    async getUuidByIdRaw(requestParameters: GetUuidByIdRequest): Promise<runtime.ApiResponse<Id>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUuidById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}/uuid`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdFromJSON(jsonValue));
    }

    /**
     * Find an uuid by id.
     */
    async getUuidById(requestParameters: GetUuidByIdRequest): Promise<Id> {
        const response = await this.getUuidByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches accounts that match ALL params. If no search parameters are provided, returns all users.
     */
    async listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<Array<UserAccountSearchResult>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.identifierOrEmail !== undefined) {
            queryParameters['identifierOrEmail'] = requestParameters.identifierOrEmail;
        }

        if (requestParameters.identifier !== undefined) {
            queryParameters['identifier'] = requestParameters.identifier;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserAccountSearchResultFromJSON));
    }

    /**
     * Searches accounts that match ALL params. If no search parameters are provided, returns all users.
     */
    async listUsers(requestParameters: ListUsersRequest): Promise<Array<UserAccountSearchResult>> {
        const response = await this.listUsersRaw(requestParameters);
        return await response.value();
    }

}
