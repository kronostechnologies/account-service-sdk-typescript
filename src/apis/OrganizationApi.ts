/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateOrUpdateOrganizationPayload,
    CreateOrUpdateOrganizationPayloadFromJSON,
    CreateOrUpdateOrganizationPayloadToJSON,
    CreateOrganizationPayload,
    CreateOrganizationPayloadFromJSON,
    CreateOrganizationPayloadToJSON,
    ErrorPayload,
    ErrorPayloadFromJSON,
    ErrorPayloadToJSON,
    Organization,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationCreated,
    OrganizationCreatedFromJSON,
    OrganizationCreatedToJSON,
} from '../models';

export interface CreateOrUpdateOrganizationRequest {
    uuid: string;
    createOrUpdateOrganizationPayload: CreateOrUpdateOrganizationPayload;
}

export interface CreateOrganizationRequest {
    createOrganizationPayload: CreateOrganizationPayload;
}

export interface GetOrganizationRequest {
    uuid: string;
}

export interface ListOrganizationRequest {
    max: number;
    pageToken?: string | null;
    parent?: string | null;
}

/**
 * 
 */
export class OrganizationApi extends runtime.BaseAPI {

    /**
     * Create or update an organization for a given uuid
     */
    async createOrUpdateOrganizationRaw(requestParameters: CreateOrUpdateOrganizationRequest): Promise<runtime.ApiResponse<OrganizationCreated>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling createOrUpdateOrganization.');
        }

        if (requestParameters.createOrUpdateOrganizationPayload === null || requestParameters.createOrUpdateOrganizationPayload === undefined) {
            throw new runtime.RequiredError('createOrUpdateOrganizationPayload','Required parameter requestParameters.createOrUpdateOrganizationPayload was null or undefined when calling createOrUpdateOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizations/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdateOrganizationPayloadToJSON(requestParameters.createOrUpdateOrganizationPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationCreatedFromJSON(jsonValue));
    }

    /**
     * Create or update an organization for a given uuid
     */
    async createOrUpdateOrganization(requestParameters: CreateOrUpdateOrganizationRequest): Promise<OrganizationCreated> {
        const response = await this.createOrUpdateOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationRequest): Promise<runtime.ApiResponse<OrganizationCreated>> {
        if (requestParameters.createOrganizationPayload === null || requestParameters.createOrganizationPayload === undefined) {
            throw new runtime.RequiredError('createOrganizationPayload','Required parameter requestParameters.createOrganizationPayload was null or undefined when calling createOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationPayloadToJSON(requestParameters.createOrganizationPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationCreatedFromJSON(jsonValue));
    }

    /**
     * Creates a new organization
     */
    async createOrganization(requestParameters: CreateOrganizationRequest): Promise<OrganizationCreated> {
        const response = await this.createOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get detailed information about an organization.
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Get detailed information about an organization.
     */
    async getOrganization(requestParameters: GetOrganizationRequest): Promise<Organization> {
        const response = await this.getOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * List organizations
     */
    async listOrganizationRaw(requestParameters: ListOrganizationRequest): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.max === null || requestParameters.max === undefined) {
            throw new runtime.RequiredError('max','Required parameter requestParameters.max was null or undefined when calling listOrganization.');
        }

        const queryParameters: any = {};

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        if (requestParameters.pageToken !== undefined) {
            queryParameters['pageToken'] = requestParameters.pageToken;
        }

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * List organizations
     */
    async listOrganization(requestParameters: ListOrganizationRequest): Promise<Organization> {
        const response = await this.listOrganizationRaw(requestParameters);
        return await response.value();
    }

}
