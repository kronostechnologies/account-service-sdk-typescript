/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EnableEquisoftConnectPayloadSchema,
    EnableEquisoftConnectPayloadSchemaFromJSON,
    EnableEquisoftConnectPayloadSchemaToJSON,
    ErrorPayload,
    ErrorPayloadFromJSON,
    ErrorPayloadToJSON,
    ImpersonatePayload,
    ImpersonatePayloadFromJSON,
    ImpersonatePayloadToJSON,
    Session,
    SessionFromJSON,
    SessionToJSON,
    SessionPayload,
    SessionPayloadFromJSON,
    SessionPayloadToJSON,
    SsoToken,
    SsoTokenFromJSON,
    SsoTokenToJSON,
} from '../models';

export interface CreateSessionRequest {
    sessionPayload: SessionPayload;
}

export interface DeleteSessionRequest {
    uuid: string;
}

export interface DeleteSessionSsoTokenRequest {
    uuid: string;
    tokenId: string;
}

export interface EnableSessionRequest {
    uuid: string;
}

export interface EnableSessionForEquisoftConnectRequest {
    uuid: string;
    enableEquisoftConnectPayloadSchema?: EnableEquisoftConnectPayloadSchema;
}

export interface GetSessionRequest {
    uuid: string;
    keepAlive?: boolean | null;
}

export interface GetSessionSsoTokenRequest {
    uuid: string;
    tokenId: string;
}

export interface ImpersonateRequest {
    uuid: string;
    impersonatePayload: ImpersonatePayload;
}

export interface RevertIdentityRequest {
    uuid: string;
}

export interface SetSessionSsoTokenRequest {
    uuid: string;
    tokenId: string;
    body: string;
}

/**
 * no description
 */
export class SessionApi extends runtime.BaseAPI {

    /**
     * Create a user session.
     */
    async createSessionRaw(requestParameters: CreateSessionRequest): Promise<runtime.ApiResponse<Session>> {
        if (requestParameters.sessionPayload === null || requestParameters.sessionPayload === undefined) {
            throw new runtime.RequiredError('sessionPayload','Required parameter requestParameters.sessionPayload was null or undefined when calling createSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionPayloadToJSON(requestParameters.sessionPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Create a user session.
     */
    async createSession(requestParameters: CreateSessionRequest): Promise<Session> {
        const response = await this.createSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete all sessions
     */
    async deleteAllSessionsRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all sessions
     */
    async deleteAllSessions(): Promise<void> {
        await this.deleteAllSessionsRaw();
    }

    /**
     * Delete all expired sessions.
     */
    async deleteExpiredSessionsRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/expired`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all expired sessions.
     */
    async deleteExpiredSessions(): Promise<void> {
        await this.deleteExpiredSessionsRaw();
    }

    /**
     * Delete a user session.
     */
    async deleteSessionRaw(requestParameters: DeleteSessionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user session.
     */
    async deleteSession(requestParameters: DeleteSessionRequest): Promise<void> {
        await this.deleteSessionRaw(requestParameters);
    }

    /**
     * Delete a sso token for the session for a given id/name/type
     */
    async deleteSessionSsoTokenRaw(requestParameters: DeleteSessionSsoTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteSessionSsoToken.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling deleteSessionSsoToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{uuid}/tokens/{tokenId}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))).replace(`{${"tokenId"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a sso token for the session for a given id/name/type
     */
    async deleteSessionSsoToken(requestParameters: DeleteSessionSsoTokenRequest): Promise<void> {
        await this.deleteSessionSsoTokenRaw(requestParameters);
    }

    /**
     * Allow activation for sessions created with enable=false. This may be extended to enable specific services. Disabled sessions are not allowed to be used by first-party application (Equisoft/Connect, Equisoft/Plan).
     */
    async enableSessionRaw(requestParameters: EnableSessionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling enableSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{uuid}/enable`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allow activation for sessions created with enable=false. This may be extended to enable specific services. Disabled sessions are not allowed to be used by first-party application (Equisoft/Connect, Equisoft/Plan).
     */
    async enableSession(requestParameters: EnableSessionRequest): Promise<void> {
        await this.enableSessionRaw(requestParameters);
    }

    /**
     * Enable session for the Equisoft/Connect service
     */
    async enableSessionForEquisoftConnectRaw(requestParameters: EnableSessionForEquisoftConnectRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling enableSessionForEquisoftConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions/{uuid}/enable/EQUISOFT_CONNECT`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnableEquisoftConnectPayloadSchemaToJSON(requestParameters.enableEquisoftConnectPayloadSchema),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable session for the Equisoft/Connect service
     */
    async enableSessionForEquisoftConnect(requestParameters: EnableSessionForEquisoftConnectRequest): Promise<void> {
        await this.enableSessionForEquisoftConnectRaw(requestParameters);
    }

    /**
     * Get detailed information about a user session.
     */
    async getSessionRaw(requestParameters: GetSessionRequest): Promise<runtime.ApiResponse<Session>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.keepAlive !== undefined) {
            queryParameters['keepAlive'] = requestParameters.keepAlive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a user session.
     */
    async getSession(requestParameters: GetSessionRequest): Promise<Session> {
        const response = await this.getSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a stored sso token for the session
     */
    async getSessionSsoTokenRaw(requestParameters: GetSessionSsoTokenRequest): Promise<runtime.ApiResponse<SsoToken>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getSessionSsoToken.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling getSessionSsoToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{uuid}/tokens/{tokenId}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))).replace(`{${"tokenId"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SsoTokenFromJSON(jsonValue));
    }

    /**
     * Get a stored sso token for the session
     */
    async getSessionSsoToken(requestParameters: GetSessionSsoTokenRequest): Promise<SsoToken> {
        const response = await this.getSessionSsoTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * For administrator with impersonation capability. Impersonate the given user context. After impersonation, the admin user becomes the \"actor\" and the impersonated user becomes the \"user\". Use /revertIdentity to revert the impersonation.
     * Impersonate the given user context.
     */
    async impersonateRaw(requestParameters: ImpersonateRequest): Promise<runtime.ApiResponse<Session>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling impersonate.');
        }

        if (requestParameters.impersonatePayload === null || requestParameters.impersonatePayload === undefined) {
            throw new runtime.RequiredError('impersonatePayload','Required parameter requestParameters.impersonatePayload was null or undefined when calling impersonate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions/{uuid}/impersonate`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImpersonatePayloadToJSON(requestParameters.impersonatePayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * For administrator with impersonation capability. Impersonate the given user context. After impersonation, the admin user becomes the \"actor\" and the impersonated user becomes the \"user\". Use /revertIdentity to revert the impersonation.
     * Impersonate the given user context.
     */
    async impersonate(requestParameters: ImpersonateRequest): Promise<Session> {
        const response = await this.impersonateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Revert an impersonated session to the context of the \"admin\" user who initiated the impersonation.
     */
    async revertIdentityRaw(requestParameters: RevertIdentityRequest): Promise<runtime.ApiResponse<Session>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling revertIdentity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{uuid}/revertIdentity`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Revert an impersonated session to the context of the \"admin\" user who initiated the impersonation.
     */
    async revertIdentity(requestParameters: RevertIdentityRequest): Promise<Session> {
        const response = await this.revertIdentityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Store a sso token for the session for a given id/name/type
     */
    async setSessionSsoTokenRaw(requestParameters: SetSessionSsoTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling setSessionSsoToken.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling setSessionSsoToken.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setSessionSsoToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        const response = await this.request({
            path: `/sessions/{uuid}/tokens/{tokenId}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))).replace(`{${"tokenId"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Store a sso token for the session for a given id/name/type
     */
    async setSessionSsoToken(requestParameters: SetSessionSsoTokenRequest): Promise<void> {
        await this.setSessionSsoTokenRaw(requestParameters);
    }

}
