/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorPayload,
    ErrorPayloadFromJSON,
    ErrorPayloadToJSON,
    ServiceAccountCreationSchema,
    ServiceAccountCreationSchemaFromJSON,
    ServiceAccountCreationSchemaToJSON,
    ServiceAccountSchema,
    ServiceAccountSchemaFromJSON,
    ServiceAccountSchemaToJSON,
    ServiceAccountUpdateSchema,
    ServiceAccountUpdateSchemaFromJSON,
    ServiceAccountUpdateSchemaToJSON,
    ServiceAccountUuidSchema,
    ServiceAccountUuidSchemaFromJSON,
    ServiceAccountUuidSchemaToJSON,
} from '../models';

export interface CreateServiceAccountRequest {
    serviceAccountCreationSchema: ServiceAccountCreationSchema;
}

export interface GetServiceAccountRequest {
    uuid: string;
}

export interface SearchServiceAccountRequest {
    name?: string | null;
}

export interface UpdateServiceAccountRequest {
    uuid: string;
    serviceAccountUpdateSchema: ServiceAccountUpdateSchema;
}

/**
 * 
 */
export class ServiceAccountApi extends runtime.BaseAPI {

    /**
     * Creates a new service account
     */
    async createServiceAccountRaw(requestParameters: CreateServiceAccountRequest): Promise<runtime.ApiResponse<ServiceAccountUuidSchema>> {
        if (requestParameters.serviceAccountCreationSchema === null || requestParameters.serviceAccountCreationSchema === undefined) {
            throw new runtime.RequiredError('serviceAccountCreationSchema','Required parameter requestParameters.serviceAccountCreationSchema was null or undefined when calling createServiceAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/serviceAccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountCreationSchemaToJSON(requestParameters.serviceAccountCreationSchema),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountUuidSchemaFromJSON(jsonValue));
    }

    /**
     * Creates a new service account
     */
    async createServiceAccount(requestParameters: CreateServiceAccountRequest): Promise<ServiceAccountUuidSchema> {
        const response = await this.createServiceAccountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get detailed information about a user account.
     */
    async getServiceAccountRaw(requestParameters: GetServiceAccountRequest): Promise<runtime.ApiResponse<ServiceAccountSchema>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getServiceAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/serviceAccounts/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountSchemaFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a user account.
     */
    async getServiceAccount(requestParameters: GetServiceAccountRequest): Promise<ServiceAccountSchema> {
        const response = await this.getServiceAccountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches service accounts that match ALL params. If none are provided, returns all service accounts
     */
    async searchServiceAccountRaw(requestParameters: SearchServiceAccountRequest): Promise<runtime.ApiResponse<Array<ServiceAccountSchema>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/serviceAccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceAccountSchemaFromJSON));
    }

    /**
     * Searches service accounts that match ALL params. If none are provided, returns all service accounts
     */
    async searchServiceAccount(requestParameters: SearchServiceAccountRequest): Promise<Array<ServiceAccountSchema>> {
        const response = await this.searchServiceAccountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a service account by uuid
     */
    async updateServiceAccountRaw(requestParameters: UpdateServiceAccountRequest): Promise<runtime.ApiResponse<ServiceAccountUuidSchema>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateServiceAccount.');
        }

        if (requestParameters.serviceAccountUpdateSchema === null || requestParameters.serviceAccountUpdateSchema === undefined) {
            throw new runtime.RequiredError('serviceAccountUpdateSchema','Required parameter requestParameters.serviceAccountUpdateSchema was null or undefined when calling updateServiceAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/serviceAccounts/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountUpdateSchemaToJSON(requestParameters.serviceAccountUpdateSchema),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountUuidSchemaFromJSON(jsonValue));
    }

    /**
     * Updates a service account by uuid
     */
    async updateServiceAccount(requestParameters: UpdateServiceAccountRequest): Promise<ServiceAccountUuidSchema> {
        const response = await this.updateServiceAccountRaw(requestParameters);
        return await response.value();
    }

}
