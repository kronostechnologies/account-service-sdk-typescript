/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SessionState,
    SessionStateFromJSON,
    SessionStateFromJSONTyped,
    SessionStateToJSON,
    SsoProvider,
    SsoProviderFromJSON,
    SsoProviderFromJSONTyped,
    SsoProviderToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * Globally unique identifier.
     * @type {string}
     * @memberof Session
     */
    sessionId: string;
    /**
     * 
     * @type {SessionState}
     * @memberof Session
     */
    state: SessionState;
    /**
     * 
     * @type {Date}
     * @memberof Session
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof Session
     */
    suspend: Date;
    /**
     * 
     * @type {Date}
     * @memberof Session
     */
    expire: Date;
    /**
     * Indicate the domain name the session cookie was emitted for.
     * @type {string}
     * @memberof Session
     */
    cookieDomain?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Session
     */
    user: User;
    /**
     * 
     * @type {User}
     * @memberof Session
     */
    actor?: User;
    /**
     * 
     * @type {SsoProvider}
     * @memberof Session
     */
    sso?: SsoProvider;
    /**
     * Session is enabled for Equisoft/Connect and is accounted for concurrent access.
     * @type {boolean}
     * @memberof Session
     */
    enabledForEquisoftConnect: boolean;
    /**
     * Indicate that the session is initiated from a mobile device.
     * @type {boolean}
     * @memberof Session
     */
    mobile: boolean;
}

export function SessionFromJSON(json: any): Session {
    return SessionFromJSONTyped(json, false);
}

export function SessionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Session {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sessionId': json['sessionId'],
        'state': SessionStateFromJSON(json['state']),
        'created': (new Date(json['created'])),
        'suspend': (new Date(json['suspend'])),
        'expire': (new Date(json['expire'])),
        'cookieDomain': !exists(json, 'cookieDomain') ? undefined : json['cookieDomain'],
        'user': UserFromJSON(json['user']),
        'actor': !exists(json, 'actor') ? undefined : UserFromJSON(json['actor']),
        'sso': !exists(json, 'sso') ? undefined : SsoProviderFromJSON(json['sso']),
        'enabledForEquisoftConnect': json['enabledForEquisoftConnect'],
        'mobile': json['mobile'],
    };
}

export function SessionToJSON(value?: Session | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sessionId': value.sessionId,
        'state': SessionStateToJSON(value.state),
        'created': (value.created.toISOString()),
        'suspend': (value.suspend.toISOString()),
        'expire': (value.expire.toISOString()),
        'cookieDomain': value.cookieDomain,
        'user': UserToJSON(value.user),
        'actor': UserToJSON(value.actor),
        'sso': SsoProviderToJSON(value.sso),
        'enabledForEquisoftConnect': value.enabledForEquisoftConnect,
        'mobile': value.mobile,
    };
}


