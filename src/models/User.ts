/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ServiceAccess,
    ServiceAccessFromJSON,
    ServiceAccessFromJSONTyped,
    ServiceAccessToJSON,
    UserAgreement,
    UserAgreementFromJSON,
    UserAgreementFromJSONTyped,
    UserAgreementToJSON,
    UserState,
    UserStateFromJSON,
    UserStateFromJSONTyped,
    UserStateToJSON,
} from './';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * Mobile phone used for sms password reset.
     * @type {string}
     * @memberof User
     */
    mobilePhone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    locale: string;
    /**
     * 
     * @type {UserState}
     * @memberof User
     */
    state: UserState;
    /**
     * Roles the user is member a member of.
     * @type {Array<string>}
     * @memberof User
     */
    roles: Array<string>;
    /**
     * User deletion is disabled.
     * @type {boolean}
     * @memberof User
     */
    deletable: boolean;
    /**
     * User is accounted for billing.
     * @type {boolean}
     * @memberof User
     */
    billable: boolean;
    /**
     * 
     * @type {UserAgreement}
     * @memberof User
     */
    agreement: UserAgreement;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    created?: Date | null;
    /**
     * 
     * @type {Array<ServiceAccess>}
     * @memberof User
     */
    services: Array<ServiceAccess>;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'uuid': json['uuid'],
        'displayName': json['displayName'],
        'email': json['email'],
        'mobilePhone': !exists(json, 'mobilePhone') ? undefined : json['mobilePhone'],
        'locale': json['locale'],
        'state': UserStateFromJSON(json['state']),
        'roles': json['roles'],
        'deletable': json['deletable'],
        'billable': json['billable'],
        'agreement': UserAgreementFromJSON(json['agreement']),
        'created': !exists(json, 'created') ? undefined : (json['created'] === null ? null : new Date(json['created'])),
        'services': ((json['services'] as Array<any>).map(ServiceAccessFromJSON)),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'uuid': value.uuid,
        'displayName': value.displayName,
        'email': value.email,
        'mobilePhone': value.mobilePhone,
        'locale': value.locale,
        'state': UserStateToJSON(value.state),
        'roles': value.roles,
        'deletable': value.deletable,
        'billable': value.billable,
        'agreement': UserAgreementToJSON(value.agreement),
        'created': value.created === undefined ? undefined : (value.created === null ? null : value.created.toISOString()),
        'services': ((value.services as Array<any>).map(ServiceAccessToJSON)),
    };
}


