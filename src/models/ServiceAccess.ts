/* tslint:disable */
/* eslint-disable */
/**
 * User account and session management
 * Provides HTTP endpoints to manage User Accounts and User Sessions.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DatabaseState,
    DatabaseStateFromJSON,
    DatabaseStateFromJSONTyped,
    DatabaseStateToJSON,
    ServiceName,
    ServiceNameFromJSON,
    ServiceNameFromJSONTyped,
    ServiceNameToJSON,
} from './';

/**
 * 
 * @export
 * @interface ServiceAccess
 */
export interface ServiceAccess {
    /**
     * 
     * @type {ServiceName}
     * @memberof ServiceAccess
     */
    serviceName?: ServiceName;
    /**
     * 
     * @type {number}
     * @memberof ServiceAccess
     */
    databaseId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccess
     */
    databaseName?: string | null;
    /**
     * 
     * @type {DatabaseState}
     * @memberof ServiceAccess
     */
    databaseState?: DatabaseState;
    /**
     * Local ID of the user in the database.
     * @type {number}
     * @memberof ServiceAccess
     */
    userId?: number | null;
    /**
     * Number of concurrent desktop session allowed for Equisoft/Connect. 0 for unlimited access.
     * @type {number}
     * @memberof ServiceAccess
     */
    maxConcurrentAccess?: number | null;
}

export function ServiceAccessFromJSON(json: any): ServiceAccess {
    return ServiceAccessFromJSONTyped(json, false);
}

export function ServiceAccessFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceAccess {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'serviceName': !exists(json, 'serviceName') ? undefined : ServiceNameFromJSON(json['serviceName']),
        'databaseId': !exists(json, 'databaseId') ? undefined : json['databaseId'],
        'databaseName': !exists(json, 'databaseName') ? undefined : json['databaseName'],
        'databaseState': !exists(json, 'databaseState') ? undefined : DatabaseStateFromJSON(json['databaseState']),
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'maxConcurrentAccess': !exists(json, 'maxConcurrentAccess') ? undefined : json['maxConcurrentAccess'],
    };
}

export function ServiceAccessToJSON(value?: ServiceAccess | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'serviceName': ServiceNameToJSON(value.serviceName),
        'databaseId': value.databaseId,
        'databaseName': value.databaseName,
        'databaseState': DatabaseStateToJSON(value.databaseState),
        'userId': value.userId,
        'maxConcurrentAccess': value.maxConcurrentAccess,
    };
}


